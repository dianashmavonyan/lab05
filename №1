№1 на Python


import numpy as np

# Define the data points
xi = np.array([0.0, 1.0, 2.0, 3.0, 4.0])
yi = np.array([0.0, 0.5, 0.86603, 1.0, 0.86603])

# Build the cubic spline
def cubic_spline(xi, yi):
    n = len(xi)
    h = np.diff(xi)
    A = np.zeros((n, n))
    b = np.zeros(n)

    # Set up the tridiagonal system of equations
    for i in range(1, n - 1):
        A[i, i - 1] = h[i - 1]
        A[i, i] = 2 * (h[i - 1] + h[i])
        A[i, i + 1] = h[i]

        b[i] = 3 * ((yi[i + 1] - yi[i]) / h[i] - (yi[i] - yi[i - 1]) / h[i - 1])

    # Enforce zero curvature boundary conditions
    A[0, 0] = 2 * h[0]
    A[0, 1] = h[0]
    b[0] = 0

    A[n - 1, n - 2] = h[n - 2]
    A[n - 1, n - 1] = 2 * h[n - 2]
    b[n - 1] = 0

    # Solve the tridiagonal system of equations
    c = np.linalg.solve(A, b)

    # Compute the coefficients of the cubic spline
    a = yi
    b = (yi[1:] - yi[:-1]) / h - h * (2 * c[:-1] + c[1:]) / 3
    d = (c[1:] - c[:-1]) / (3 * h)

    return a, b, c, d

a, b, c, d = cubic_spline(xi, yi)

# Evaluate the cubic spline at x*
x_star = 1.5
i = np.searchsorted(xi, x_star) - 1
h = xi[i + 1] - xi[i]

y_star = a[i] + b[i] * (x_star - xi[i]) + c[i] * (x_star - xi[i])**2 + d[i] * (x_star - xi[i])**3

# Print the result
print("Value of the cubic spline at x* = 1.5:", y_star)
